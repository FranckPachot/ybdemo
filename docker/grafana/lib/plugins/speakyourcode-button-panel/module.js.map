{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./buttonPanel.tsx","webpack:///./editor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AppEvents, InterpolateFunction, PanelProps } from '@grafana/data';\nimport { getAppEvents, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, HorizontalGroup, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\nimport { ButtonOptions, Options } from 'types';\n\ninterface Props extends PanelProps<Options> {}\n\nasync function postQuery(button: ButtonOptions, text: string, replaceVariables: InterpolateFunction) {\n  const payload = JSON.parse(replaceVariables(button.query || '{}'));\n  const ds = await getDataSourceSrv().get(button.datasource);\n  const appEvents = getAppEvents();\n  try {\n    const resp = await getBackendSrv().datasourceRequest({\n      method: 'POST',\n      url: 'api/ds/query',\n      data: {\n        queries: [\n          {\n            datasourceId: ds.id,\n            refId: '1',\n            ...payload,\n          },\n        ],\n      },\n    });\n    appEvents.publish({\n      type: AppEvents.alertSuccess.name,\n      payload: [text + ': ' + resp.status + ' (' + resp.statusText + ')'],\n    });\n  } catch (error: any) {\n    appEvents.publish({\n      type: AppEvents.alertError.name,\n      payload: [text + ': ' + error.status + ' (' + error.statusText + ') ' + error.data.message],\n    });\n  }\n}\n\nexport const ButtonPanel: React.FC<Props> = ({ options, replaceVariables }) => {\n  const renderButtons = (buttons: ButtonOptions[]) => {\n    return buttons.map((b: ButtonOptions, index: number) => {\n      const text = b.text || 'Button';\n      return (\n        <Button key={index} variant={b.variant} onClick={async () => postQuery(b, text, replaceVariables)}>\n          {text}\n        </Button>\n      );\n    });\n  };\n\n  return (\n    (options.orientation === 'vertical' && (\n      <VerticalGroup justify=\"center\" align=\"center\">\n        {renderButtons(options.buttons)}\n      </VerticalGroup>\n    )) || (\n      <HorizontalGroup justify=\"center\" align=\"center\">\n        {renderButtons(options.buttons)}\n      </HorizontalGroup>\n    )\n  );\n};\n","import { PanelOptionsEditorBuilder, SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Collapse, Field, Input, RadioButtonGroup, Select, TextArea } from '@grafana/ui';\nimport React from 'react';\nimport { ButtonOptions, Options } from 'types';\n\nexport interface EditorProps {\n  buttons: ButtonOptions[];\n  onChange: (buttons: ButtonOptions[]) => void;\n}\n\nexport const Editor: React.FC<EditorProps> = ({ buttons, onChange }) => {\n  const [elems, setElems] = React.useState<Array<SelectableValue<string>>>();\n  const [isOpen, setOpen] = React.useState<boolean[]>(buttons.map((e) => false));\n  const [cacheButtons, setCacheButtons] = React.useState<ButtonOptions[]>(buttons);\n  React.useEffect(() => {\n    let cancel = false;\n    const fetchData = async () => {\n      const ds = await getBackendSrv().get('/api/datasources');\n      if (!cancel) {\n        setElems(ds.map((i: any) => ({ label: i.name, value: i.name, name: i.name })));\n      }\n    };\n    fetchData();\n    return (): void => {\n      cancel = true;\n    };\n  }, []);\n\n  const updateCacheButtons = (index: number, newButton: ButtonOptions) => {\n    let currentButton = { ...cacheButtons[index] };\n    setCacheButtons([\n      ...cacheButtons.slice(0, index),\n      {\n        text: newButton.text || currentButton.text,\n        datasource: newButton.datasource || currentButton.datasource,\n        query: newButton.query || currentButton.query,\n        variant: newButton.variant || currentButton.variant,\n      },\n      ...cacheButtons.slice(index + 1),\n    ]);\n  };\n\n  return (\n    <React.Fragment>\n      {cacheButtons.map((b: ButtonOptions, i: number) => (\n        <Collapse\n          key={i}\n          label={'Button ' + (i + 1).toString()}\n          isOpen={isOpen[i]}\n          collapsible\n          onToggle={() => {\n            setOpen((open) => [...open.slice(0, i), !open[i], ...open.slice(i + 1)]);\n          }}\n        >\n          <Field label=\"Text\" description=\"Text to be displayed on the button\">\n            <Input\n              id={'t-' + i.toString()}\n              value={b.text}\n              placeholder=\"Button\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheButtons(i, { text: e.target.value })}\n            />\n          </Field>\n          <Field label=\"Datasource\" description=\"Choose the Datasource for the query\">\n            <Select\n              onChange={(e: SelectableValue<string>) => updateCacheButtons(i, { datasource: e.value })}\n              value={b.datasource}\n              options={elems}\n            />\n          </Field>\n          <Field label=\"Query\" description=\"JSON query to be triggered on Button Click\">\n            <TextArea\n              id={'q-' + i.toString()}\n              value={b.query}\n              placeholder=\"{ query: 'your query' }\"\n              rows={5}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateCacheButtons(i, { query: e.target.value })}\n            />\n          </Field>\n          <Field label=\"Color\" description=\"Color of the button\">\n            <RadioButtonGroup\n              options={[\n                { label: 'Primary', value: 'primary' },\n                { label: 'Secondary', value: 'secondary' },\n                { label: 'Destructive', value: 'destructive' },\n                { label: 'Link', value: 'link' },\n              ]}\n              value={b.variant || 'primary'}\n              fullWidth\n              onChange={(e: any) => updateCacheButtons(i, { variant: e })}\n            ></RadioButtonGroup>\n          </Field>\n          <Field>\n            <>\n              <Button\n                icon=\"trash-alt\"\n                variant=\"destructive\"\n                onClick={() => onChange([...buttons.slice(0, i), ...buttons.slice(i + 1)])}\n              >\n                Delete\n              </Button>\n              <Button icon=\"save\" variant=\"primary\" onClick={() => onChange(cacheButtons)}>\n                Apply\n              </Button>\n            </>\n          </Field>\n        </Collapse>\n      ))}\n      <Field>\n        <Button\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => {\n            onChange([...buttons, { text: '', datasource: '', query: '' }]);\n          }}\n        >\n          Add Button\n        </Button>\n      </Field>\n    </React.Fragment>\n  );\n};\n\nexport function addEditor(builder: PanelOptionsEditorBuilder<Options>) {\n  builder\n    .addRadio({\n      path: 'orientation',\n      name: 'Orientation',\n      description: 'Stacking direction in case of multiple buttons',\n      defaultValue: 'horizontal',\n      settings: {\n        options: [\n          { value: 'horizontal', label: 'Horizontal' },\n          { value: 'vertical', label: 'Vertical' },\n        ],\n      },\n    })\n    .addCustomEditor({\n      id: 'buttons',\n      path: 'buttons',\n      name: 'Button Configuration',\n      defaultValue: [{ text: '', datasource: '', query: '' }],\n      editor: (props) => <Editor buttons={props.value} onChange={props.onChange} />,\n    });\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { ButtonPanel } from './buttonPanel';\nimport { addEditor } from './editor';\nimport { Options } from './types';\n\nexport const plugin = new PanelPlugin<Options>(ButtonPanel);\n\nplugin.setPanelOptions((builder) => addEditor(builder));\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","postQuery","button","text","replaceVariables","payload","JSON","parse","query","ds","getDataSourceSrv","datasource","appEvents","getAppEvents","resp","getBackendSrv","datasourceRequest","method","url","data","queries","datasourceId","id","refId","publish","type","AppEvents","status","statusText","error","message","Editor","buttons","onChange","elems","setElems","React","isOpen","setOpen","map","e","cacheButtons","setCacheButtons","cancel","i","label","name","updateCacheButtons","index","newButton","currentButton","slice","variant","b","Collapse","toString","collapsible","onToggle","open","Field","description","Input","placeholder","target","Select","options","TextArea","rows","RadioButtonGroup","fullWidth","Button","icon","onClick","size","plugin","PanelPlugin","renderButtons","orientation","VerticalGroup","justify","align","HorizontalGroup","setPanelOptions","builder","addRadio","path","defaultValue","settings","addCustomEditor","editor","props","addEditor"],"sourceRoot":""}