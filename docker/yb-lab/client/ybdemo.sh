cd $(dirname $0)
#curl -Ls https://github.com/FranckPachot/ybdemo/releases/download/v0.0.1/YBDemo-0.0.1-SNAPSHOT-jar-with-dependencies.jar > YBDemo.jar
case $1 in 
init)
  # stop on error so that it is retried until sucessful
   PGCONNECT_TIMEOUT=5 ysqlsh -h yb-tserver-0 -v ON_ERROR_STOP=on -e <<'SQL'
   drop table if exists demo;
   create table if not exists demo(id bigint generated by default as identity, ts timestamptz default clock_timestamp(), message text, primary key(id hash));
   insert into demo(message) select format('Message #%s',generate_series(1,1000));
SQL
  ;;
read)
   {
   for i in $(seq 1 ${2:-1}) ; do echo "\
   with random as (select (1000*random()+1)::int id) select row_to_json(demo) from random natural left outer join demo;" ; done
   } | java -jar YBDemo.jar
  ;;
update)
   {
   for i in $(seq 1 ${2:-1}) ; do echo "\
   update demo set message=format('updated when connected to %s',current_setting('listen_addresses')) returning row_to_json(demo)" ; done 
   } | java -jar YBDemo.jar
  ;;
insert)
   {
   for i in $(seq 1 ${2:-1}) ; do echo "\
   insert into demo(message) values (format('inserted when connected to %s',current_setting('listen_addresses'))) returning row_to_json(demo)" ; done 
   } | java -jar YBDemo.jar
  ;;
count)
   {
   echo "\
   select format('Rows inserted in the last minute: %s',to_char(count(*),'999999999')) from demo where ts > clock_timestamp() - interval '1 minute'"
   } | java -jar YBDemo.jar
  ;;
*)
   for i in  $(seq 1 ${2:-1}) ; do echo "
   execute ybdemo(1000);
   " ; done | java -jar YBDemo.jar
  ;;
esac
